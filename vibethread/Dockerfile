# syntax=docker/dockerfile:1

# Multi-stage build for production
FROM node:20-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:20-slim AS production

# Install runtime dependencies (removed su-exec, added gosu as alternative)
RUN apt-get update && apt-get install -y \
    ffmpeg \
    python3 \
    python3-pip \
    curl \
    wget \
    ca-certificates \
    gosu \
    && rm -rf /var/lib/apt/lists/*

# Install yt-dlp
RUN pip3 install --no-cache-dir --break-system-packages yt-dlp

# Verify installations
RUN ffmpeg -version && yt-dlp --version

# Create app user and group with specific UID/GID
RUN groupadd -g 1001 appuser && useradd -u 1001 -g appuser -s /bin/bash -m appuser

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Copy public directory from source (since it's not generated by build)
COPY public ./public

# Copy startup script
COPY scripts/startup.sh /app/scripts/startup.sh
RUN chmod +x /app/scripts/startup.sh

# Create src/audio directory and empty cookies.txt
RUN mkdir -p /app/src/audio && \
    touch /app/src/audio/cookies.txt && \
    chmod 644 /app/src/audio/cookies.txt

# Copy cookies.txt from source if it exists
COPY src/audio/cookies.txt /app/src/audio/cookies.txt

# Create necessary directories with proper permissions
RUN mkdir -p /app/public/audio/downloads /app/logs && \
    chmod -R 777 /app/public/audio/downloads && \
    chmod -R 755 /app/logs && \
    chown -R appuser:appuser /app

# Create a startup wrapper that handles permissions
COPY <<EOF /app/docker-entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ Starting VibeThread Backend Container..."

# Ensure directories exist with proper permissions
mkdir -p /app/public/audio/downloads /app/logs /app/src/audio
chmod -R 777 /app/public/audio/downloads
chmod -R 755 /app/logs

# Test write permissions
echo "Testing write permissions..."
if echo "test" > /app/public/audio/downloads/test.tmp 2>/dev/null; then
    rm -f /app/public/audio/downloads/test.tmp
    echo "‚úÖ Write permissions verified"
else
    echo "‚ùå Write permissions failed"
    ls -la /app/public/audio/
fi

# Ensure ownership
chown -R appuser:appuser /app

# Switch to appuser and run the startup script (using gosu instead of su-exec)
echo "Switching to appuser and starting application..."
exec gosu appuser /app/scripts/startup.sh "\$@"
EOF

RUN chmod +x /app/docker-entrypoint.sh

# Expose the port
EXPOSE 3000

# Health check using localhost
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/audio/health || exit 1

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Use the wrapper script as entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# Start the application
CMD ["node", "dist/main.js"]